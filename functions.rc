#!/usr/bin/env bash
# Copyright [2016] [Kevin Carter]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

source vars.rc

function mkdir_check {
  if [ ! -d "$1" ];then
    mkdir -p "$1"
  fi
}

function ssh_agent_reset {
  # If you were running ssh-agent with forwarding this will clear out the keys
  #  in your cache which can cause confusion.
  if pgrep ssh-agent; then
    killall ssh-agent; eval `ssh-agent`
  fi
}

function iptables_general_rule_add {
if ! iptables -w -C $1;then
  iptables -w -I $1
fi
}

function iptables_filter_rule_add {
if ! iptables -w -t $1 -C $2;then
  iptables -w -t $1 -I $2
fi
}

function get_all_nodes {
python <<EOL
import json
with open('sim_inv.json') as f:
  data = f.read()
inv = json.loads(data)
for host in inv.values():
  for node_type,nodes in host.items():
    for node_name,node_info in nodes.items():
      print node_type + ',' + node_name + ',' + node_info['ansible_pxe_host'] + ',' + node_info['ansible_mgmt_host'] + ',' + node_info['ansible_tunnel_host'] + ',' + node_info['ansible_storage_host'] + ',' + node_info['ansible_flat_host']
EOL
}

function get_all_nodes_host {
python <<EOL
import json
import os
with open('sim_inv.json') as f:
  data = f.read()
inv = json.loads(data)
host = inv[os.uname()[1]]
for node_type,nodes in host.items():
  for node_name,node_info in nodes.items():
    print node_type + ',' + node_name + ',' + node_info['ansible_pxe_host']
EOL
}

function ip_2_mac {
python <<EOL
mac_prefix = "$1"
ip = "$2"
octets = ip.split('.')
first_oct = int(octets[0])
second_oct = int(octets[1])
third_oct = int(octets[2])
fourth_oct = int(octets[3])
mac = mac_prefix + format(first_oct,'02x') + ':' + format(second_oct,'02x') + ':' + format(third_oct, '02x') + ':' + format(fourth_oct, '02x')
print mac
EOL
}

function wait_ping {
echo "Waiting for all nodes to become available. This can take around ${1:-10} min"
for node in $(get_all_nodes_host); do
  node_ip=${node##*','}
  node_type=${node%%','*}
  temp=${node%','*}
  node_name=${temp#*','}
  echo "Waiting for node: $node_name on $node_ip"
  until ping -c1 $node_ip &>/dev/null; do
    sleep 15
  done
done
}

function wait_ssh {
echo "Waiting for all nodes to become available. This can take around ${1:-10} min"
for node in $(get_all_nodes_host); do
  node_ip=${node##*','}
  node_type=${node%%','*}
  temp=${node%','*}
  node_name=${temp#*','}
  echo "Waiting for node: $node_name on $node_ip"
  until ssh -q -o StrictHostKeyChecking=no -o BatchMode=yes -o ConnectTimeout=10 $node_ip exit > /dev/null; do
    sleep 15
  done
done
}

function rekick_vms {
# If you pass the short name of the host to the function it will only force rekick just the ONE host.
# Set the VM disk size in gigabytes
VM_DISK_SIZE="${VM_DISK_SIZE:-252}"
for node in $(get_all_nodes_host); do
  node_ip=${node##*','}
  node_type=${node%%','*}
  temp=${node%','*}
  node_name=${temp#*','}
  for vm_name in $(virsh list --all --name | grep "$node_name"); do
    virsh destroy "${vm_name}" || true
  done
  # Instruct the system to run the image create.
  #  If you have the option ``VM_IMAGE_CREATE=true`` the system will reformat the disk image
  #  destroying anything that was it image previously.
  VM_IMAGE_CREATE=${VM_IMAGE_CREATE:-true}
  if [[ "${VM_IMAGE_CREATE}" = true ]]; then
    qemu-img create -f qcow2 \
                    -o preallocation=metadata,compat=1.1,lazy_refcounts=on \
                    /var/lib/libvirt/images/$node_name.openstackci.local.img \
                    "${VM_DISK_SIZE}G"
  fi
  VM_NAME=$(virsh list --all --name | grep "$node_name" || echo "")
  if [[ -z "${VM_NAME}" ]]; then
    virsh define /etc/libvirt/qemu/$node_name.openstackci.local.xml || true
    virsh create /etc/libvirt/qemu/$node_name.openstackci.local.xml || true
  else
    virsh start "${VM_NAME}"
  fi
done
}

function install_bits {
successerator openstack-ansible $@
}

function successerator {
set +e
# Get the time taht the method was started
OP_START_TIME=$(date +%s)
#Set the initial return value to failure.
false
for ((RETRY=0; $? != 0 && RETRY < MAX_RETRIES; RETRY++)); do
  if [ ${RETRY} -gt 1 ]; then
    $@ -vvvv
  else
    $@
  fi
done

# If max retries were hit, fail.
if [ $? -ne 0 && [ ${RETRY} -eq ${MAX_RETRIES} ];then
  echo -e "\n Hit maximum number of retries, giving up..\n"
  exit
fi

# Print the time that the method completed.
OP_TOTAL_SECONDS="$(( $(date +%s) - OP_START_TIME ))"
REPORT_OUTPUT="${OP_TOTAL_SECONDS} seconds"
REPORT_DATA+="- Operation: [ $@ ]\t${REPORT_OUTPUT}\tNumber of Attempts [ ${RETRY} ]\n"
echo -e "Run Time = ${REPORT_OUTPUT}"
set -e
}

